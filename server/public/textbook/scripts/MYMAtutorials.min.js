function genQuestionObject(options) {
  // if (options.ans) this.ans = options.ans;
  // if (options.INbox) this.INbox = options.INbox;
  // if (options.OUTbox) this.OUTbox = options.OUTbox;
  // if (options.Check) this.Check = options.Check;
  // if (options.Show) this.Show = options.Show;
  // if (options.MRbox) this.MRbox = options.MRbox;
  // return this;
  return options;
}

function keyupdate(obj) {
  var math = obj.INbox.val();
  var tree = MathLex.parse(math),
    latex = MathLex.render(tree, "latex");
  MathJax.Hub.Queue(["Text", obj.OUTbox, "\\displaystyle " + latex]);
}

function check(obj, method, vari) {
  var ans = obj.ans;
  var user_ans = obj.INbox.val();
  var Check_Sage;
  if (method == "string") {
    Check_Sage = equivstr(ans, user_ans);
  } else if (method == "equiv") {
    Check_Sage = equivstr(ans, user_ans, vari);
  } else if (method == "diff") {
    Check_Sage = diffstr(ans, user_ans, vari);
  } else {
    $("#reply").val("Method not supported.");
  }
  var xhr = new XMLHttpRequest();
  xhr.open("POST", "https://sagecell.sagemath.org/service", true);
  xhr.onload = function() {
    var isCorrect = JSON.parse(xhr.response).stdout;
    if (isCorrect == "True\n") {
      $("#reply").val("That's correct!");
      obj.MRbox.val("Correct")
        .removeClass("correct-bg warning-bg incorrect-bg shown-bg hint-bg")
        .addClass("correct-bg");
      obj.Correct = true;
      obj.MRbox.css("background-color", "#00ff00");
    } else if (isCorrect == "False\n") {
      $("#reply").val("Your answer's not quite right. Try again.");
      obj.MRbox.val("Incorrect");
      obj.MRbox.css("background-color", "#ff0000");
    } else {
      $("#reply").val(
        "Oops. We didn't quite understand your answer. Please check your syntax and try again."
      );
      obj.MRbox.val("Warning");
      obj.MRbox.css("background-color", "orange");
    }
  };
  xhr.setRequestHeader("content-type", "application/x-www-form-urlencoded");
  xhr.send("code=" + encodeURIComponent(Check_Sage));
}
function equivstr(ans, user_ans, vari) {
  var str =
    vari +
    "=var('" +
    vari +
    "')\n" +
    "if (" +
    ans +
    ")==(" +
    user_ans +
    "):\n" +
    "    print(true)\n" +
    "else:\n" +
    "    print(false)\n";
  return str;
}
function diffstr(ans, user_ans, vari) {
  var str =
    vari +
    "=var('" +
    vari +
    "')\n" +
    "if ((" +
    ans +
    ")-(" +
    user_ans +
    "))<0.001:\n" +
    "    print(true)\n" +
    "else:\n" +
    "    print(false)\n";
  return str;
}

function show(obj) {
  var ans = obj.ans;
  obj.INbox.val(ans);
  if (obj.OUTbox) {
    var tree = MathLex.parse(ans),
      latex = MathLex.render(tree, "latex");
    MathJax.Hub.Queue(["Text", obj.OUTbox, "\\displaystyle " + latex]);
  }
  if (obj.MRbox) obj.MRbox.val("Shown");
  obj.Shown = true;
  obj.MRbox.css("background-color", "#ffff00");
}

function clearboxes(array) {
  for (var i = 0; i < array.length; ++i) {
    var obj = array[i];
    if (obj.INbox) {
      obj.INbox.val("");
      obj.INbox.css("background-color", "#ffffff");
    }
    if (obj.OUTbox) MathJax.Hub.Queue(["Text", obj.OUTbox, ""]);
    if (obj.MRbox) {
      obj.MRbox.val("");
      obj.MRbox.css("background-color", "#ffffff");
    }
  }
  $("#reply").val("");
}

function enable(obj) {
  obj.INbox.prop("disabled", false);
  if (obj.Check) obj.Check.prop("disabled", false);
  if (obj.Show) obj.Show.prop("disabled", false);
}
function disable(obj) {
  obj.INbox.prop("disabled", true);
  if (obj.Check) obj.Check.prop("disabled", true);
  if (obj.Show) obj.Show.prop("disabled", true);
}
function disableall(array) {
  for (var i = 0; i < array.length; ++i) {
    obj = array[i];
    disable(obj);
  }
}
